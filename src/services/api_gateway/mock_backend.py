"""
Mock backend –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
–ü—Ä–æ—Å—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
"""

import asyncio
import random
from typing import Dict, Optional

import uvicorn
from fastapi import FastAPI, HTTPException, status
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from fastapi.staticfiles import StaticFiles
from pydantic import BaseModel


# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class QueryIn(BaseModel):
    user_id: str
    query: str


class QueryOut(BaseModel):
    user_id: str
    response: tuple[str, list[str]]
    theme: Optional[str]


class FeedbackIn(BaseModel):
    user_id: str
    user_message: str
    model_response: str
    rating: int
    feedback: Optional[str]


class QuestionItem(BaseModel):
    normalized: str
    count: int
    examples: Optional[list[str]] = None


class QuestionsOut(BaseModel):
    generated_at: str
    limit: int
    results: list[QuestionItem]


# FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(
    title="Mock Backend –¥–ª—è RAG Template",
    description="–ü—Ä–æ—Å—Ç–æ–π mock —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞",
    version="1.0.0",
    openapi_url="/api/openapi.json",
    docs_url="/api/docs",
    redoc_url=None,
)

# CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
origins = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "http://localhost:8080",
    "http://127.0.0.1:8080",
]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Mock –∏—Å—Ç–æ—á–Ω–∏–∫–∏
MOCK_SOURCES = [
    "https://www.roseltorg.ru/knowledge_db/azbuka-zakupok/torgi",
    "https://www.roseltorg.ru/knowledge_db/trebovaniya-k-uchastnikam-zakupok",
    "https://www.roseltorg.ru/knowledge_db/docs/documents",
    "https://www.roseltorg.ru/_flysystem/webdav/2025/08/25/rp_corp_25082025.pdf",
]

# –°—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ–º—ã
request_count = {}


@app.post("/api/v1/query")
async def process_query(query_data: QueryIn) -> QueryOut:
    """
    Mock –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –æ–±—Ä–∞—Ç–Ω–æ –∫–∞–∫ –æ—Ç–≤–µ—Ç
    –ù–∞ —Ç—Ä–µ—Ç–∏–π –∑–∞–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ–º—É
    """
    # –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await asyncio.sleep(random.uniform(0.5, 1.5))

    # –ü–æ–¥—Å—á–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = query_data.user_id
    if user_id not in request_count:
        request_count[user_id] = 0
    request_count[user_id] += 1

    # –°–æ–∑–¥–∞–µ–º mock –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–º–ø—Ç–∞
    user_query = query_data.query

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤ markdown —Ñ–æ—Ä–º–∞—Ç–µ
    mock_response = f"""### **–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å**

–í—ã —Å–ø—Ä–æ—Å–∏–ª–∏: "{user_query}"

---

–≠—Ç–æ **mock –æ—Ç–≤–µ—Ç** –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã. –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã \
—Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò –º–æ–¥–µ–ª–∏ —Å –∞–Ω–∞–ª–∏–∑–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.

#### **–û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã:**
- –í–∞—à –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
- –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
- Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
- –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –∫–∞–∫ [1], [2], [3]

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π backend.

**–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:** [1] [2] [3]"""

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–º—É (—Å 3-–≥–æ –∑–∞–ø—Ä–æ—Å–∞)
    theme = None
    if request_count[user_id] >= 3:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–º–ø—Ç –∫–∞–∫ —Ç–µ–º—É (–æ–±—Ä–µ–∑–∞–µ–º –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π)
        theme = user_query[:100] + "..." if len(user_query) > 100 else user_query

    # –°–ª—É—á–∞–π–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏
    sources = random.sample(MOCK_SOURCES, k=random.randint(2, 4))

    return QueryOut(user_id=user_id, response=(mock_response, sources), theme=theme)


@app.post("/api/v1/feedback")
async def submit_feedback(feedback_data: FeedbackIn) -> Dict[str, bool]:
    """
    Mock –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ - –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É—Å–ø–µ—Ö
    """
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞
    if not (1 <= feedback_data.rating <= 5):
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="–†–µ–π—Ç–∏–Ω–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 5",
        )

    # –ò–º–∏—Ç–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await asyncio.sleep(0.2)

    # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    print(f"üìù –ü–æ–ª—É—á–µ–Ω –æ—Ç–∑—ã–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {feedback_data.user_id}")
    print(f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {feedback_data.rating}/5")
    print(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {feedback_data.user_message[:50]}...")
    print(f"ü§ñ –û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏: {feedback_data.model_response[:50]}...")
    if feedback_data.feedback:
        print(f"üìã –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–∑—ã–≤: {feedback_data.feedback}")
    print("---")

    return {"ok": True}


@app.get("/api/v1/common_questions", response_model=QuestionsOut)
async def get_common_questions(limit: int = 10) -> QuestionsOut:
    """
    Mock —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤

    Args:
        limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞

    Returns:
        QuestionsOut: –°–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏
    """
    print(f"üìä –ó–∞–ø—Ä–æ—Å –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ (–ª–∏–º–∏—Ç: {limit})")

    # Mock –¥–∞–Ω–Ω—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    mock_questions = [
        QuestionItem(
            normalized="–ö–∞–∫ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–º –∞—É–∫—Ü–∏–æ–Ω–µ?",
            count=156,
            examples=[
                "–ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—É –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –∞—É–∫—Ü–∏–æ–Ω",
                "–ì–¥–µ –ø–æ–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ç–æ—Ä–≥–∞—Ö?",
                "–ö–∞–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –∞—É–∫—Ü–∏–æ–Ω?",
                "–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ –∑–∞–∫—É–ø–∫–µ",
                "–ö–∞–∫ —Å—Ç–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–∞?",
            ],
        ),
        QuestionItem(
            normalized="–ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∑–∞–∫—É–ø–∫–∞—Ö?",
            count=134,
            examples=[
                "–°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ç–µ–Ω–¥–µ—Ä–µ",
                "–ö–∞–∫–∏–µ —Å–ø—Ä–∞–≤–∫–∏ –Ω—É–∂–Ω—ã –¥–ª—è –∑–∞–∫—É–ø–æ–∫?",
                "–î–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç –ø—Ä–∏ —É—á–∞—Å—Ç–∏–∏ –≤ —Ç–æ—Ä–≥–∞—Ö",
                "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º —É—á–∞—Å—Ç–Ω–∏–∫–∞",
                "–ü–µ—Ä–µ—á–µ–Ω—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∞—É–∫—Ü–∏–æ–Ω–∞",
            ],
        ),
        QuestionItem(
            normalized="–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–∏—Å—Ç–µ–º–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö –∑–∞–∫—É–ø–æ–∫?",
            count=98,
            examples=[
                "–ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤",
                "–ö–∞–∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º–∞ –∑–∞–∫—É–ø–æ–∫?",
                "–û–±—ä—è—Å–Ω–∏—Ç–µ –º–µ—Ö–∞–Ω–∏–∑–º —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤",
                "–ö–∞–∫ –ø—Ä–æ—Ö–æ–¥—è—Ç —Ç–æ—Ä–≥–∏ –≤ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–º –≤–∏–¥–µ?",
            ],
        ),
        QuestionItem(
            normalized="–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∑–∞–∫—É–ø–æ–∫ –ø–æ 44-–§–ó",
            count=87,
            examples=[
                "–ö—Ç–æ –º–æ–∂–µ—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –≥–æ—Å–∑–∞–∫—É–ø–∫–∞—Ö?",
                "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è 44-–§–ó –∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º",
                "–ö—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ç–±–æ—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç–æ—Ä–≥–æ–≤",
                "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –≥–æ—Å–∑–∞–∫—É–ø–∫–∞—Ö",
            ],
        ),
        QuestionItem(
            normalized="–ö–∞–∫ –æ–±–∂–∞–ª–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–æ—Ä–≥–æ–≤?",
            count=76,
            examples=[
                "–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏—è –∏—Ç–æ–≥–æ–≤ –∞—É–∫—Ü–∏–æ–Ω–∞",
                "–ö—É–¥–∞ –ø–æ–¥–∞–≤–∞—Ç—å –∂–∞–ª–æ–±—É –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–æ—Ä–≥–æ–≤?",
                "–ö–∞–∫ –æ–ø—Ä–æ—Ç–µ—Å—Ç–æ–≤–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ –∑–∞–∫–∞–∑—á–∏–∫–∞?",
                "–ü–æ—Ä—è–¥–æ–∫ –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏—è –≤ –§–ê–°",
            ],
        ),
        QuestionItem(
            normalized="–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å—å –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∑–∞–∫—É–ø–∫–∞—Ö",
            count=65,
            examples=[
                "–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –≠–¶–ü –¥–ª—è —Ç–æ—Ä–≥–æ–≤?",
                "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∏",
                "–ì–¥–µ –æ—Ñ–æ—Ä–º–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –≠–ü?",
                "–ö–∞–∫–∞—è –ø–æ–¥–ø–∏—Å—å –Ω—É–∂–Ω–∞ –¥–ª—è –∞—É–∫—Ü–∏–æ–Ω–æ–≤?",
            ],
        ),
        QuestionItem(
            normalized="–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è –≤ –∑–∞–∫—É–ø–∫–∞—Ö",
            count=54,
            examples=[
                "–ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –±–∞–Ω–∫–æ–≤—Å–∫—É—é –≥–∞—Ä–∞–Ω—Ç–∏—é?",
                "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –±–∞–Ω–∫–æ–≤—Å–∫–∏–º –≥–∞—Ä–∞–Ω—Ç–∏—è–º",
                "–ì–¥–µ –ø–æ–ª—É—á–∏—Ç—å –≥–∞—Ä–∞–Ω—Ç–∏—é –¥–ª—è —Ç–æ—Ä–≥–æ–≤?",
            ],
        ),
        QuestionItem(
            normalized="–ú–∞–ª—ã–π –∏ —Å—Ä–µ–¥–Ω–∏–π –±–∏–∑–Ω–µ—Å –≤ –∑–∞–∫—É–ø–∫–∞—Ö",
            count=43,
            examples=[
                "–õ—å–≥–æ—Ç—ã –¥–ª—è –ú–°–ü –≤ –∑–∞–∫—É–ø–∫–∞—Ö",
                "–ö–∞–∫ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –ú–°–ü –≤ —Ç–æ—Ä–≥–∞—Ö?",
                "–ü—Ä–µ—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ –¥–ª—è –º–∞–ª–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞",
            ],
        ),
        QuestionItem(
            normalized="–ö–æ–Ω—Ç—Ä–∞–∫—Ç –ø–æ—Å–ª–µ –ø–æ–±–µ–¥—ã –≤ —Ç–æ—Ä–≥–∞—Ö",
            count=32,
            examples=[
                "–ö–∞–∫ –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç –ø–æ—Å–ª–µ –∞—É–∫—Ü–∏–æ–Ω–∞?",
                "–°—Ä–æ–∫–∏ –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞",
            ],
        ),
        QuestionItem(
            normalized="–ê–Ω—Ç–∏–¥–µ–º–ø–∏–Ω–≥–æ–≤—ã–µ –º–µ—Ä—ã –≤ –∑–∞–∫—É–ø–∫–∞—Ö",
            count=21,
            examples=["–ß—Ç–æ —Ç–∞–∫–æ–µ –∞–Ω—Ç–∏–¥–µ–º–ø–∏–Ω–≥ –≤ —Ç–æ—Ä–≥–∞—Ö?"],
        ),
        QuestionItem(normalized="–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–æ—Å—Ç–∞–≤—â–∏–∫", count=1, examples=[]),
    ]

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤
    if limit == 200:
        actual_limit = len(mock_questions)
    else:
        actual_limit = min(limit, len(mock_questions))
    selected_questions = mock_questions[:actual_limit]

    return QuestionsOut(
        generated_at="2024-01-15T10:30:00Z",
        limit=actual_limit,
        results=selected_questions,
    )


@app.get("/api/v1/faq")
async def get_faq(limit: int = 10) -> Dict[str, list]:
    """
    Mock FAQ - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤
    """
    mock_questions = [
        "–ö–∞–∫ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö —Ç–æ—Ä–≥–∞—Ö?",
        "–ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏?",
        "–ö–∞–∫ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ –∑–∞–∫—É–ø–∫–µ?",
        "–ß—Ç–æ —Ç–∞–∫–æ–µ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –æ—Ç–±–æ—Ä?",
        "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å—å?",
    ]

    return {"questions": mock_questions[:limit]}


@app.get("/api/v1/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞"""
    return {
        "status": "ok",
        "message": "Mock backend —Ä–∞–±–æ—Ç–∞–µ—Ç",
        "active_users": len(request_count),
        "total_requests": sum(request_count.values()),
    }


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
@app.exception_handler(Exception)
async def global_exception_handler(request, exc):
    print(f"‚ùå –û—à–∏–±–∫–∞ –≤ mock backend: {exc}")
    return JSONResponse(
        status_code=500, content={"detail": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"}
    )


# –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã (—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥)
app.mount("/", StaticFiles(directory="src/services/ui", html=True), name="static")


if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ Mock Backend...")
    print("üì° API: http://127.0.0.1:8080/api/docs")
    print("üé® Frontend: http://127.0.0.1:8080")

    uvicorn.run(
        "src.services.api_gateway.mock_backend:app",
        host="0.0.0.0",
        port=8080,
        reload=True,
        access_log=True,
    )
