/**
 * –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ Q&A —Å–∏—Å—Ç–µ–º—ã
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ API backend'–∞
 */

class ChatApp {
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —á–∞—Ç–∞
     */
    constructor() {
        // API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        this.apiBaseUrl = 'http://localhost:8080';
        this.apiEndpoint = '/api/v1/query';
        this.feedbackEndpoint = '/api/v1/feedback';

        // UUID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ)
        this.userUuid = this.generateUUID();

        // DOM —ç–ª–µ–º–µ–Ω—Ç—ã
        this.messageInput = document.getElementById('messageInput');
        this.sendButton = document.getElementById('sendButton');
        this.resetButton = document.getElementById('resetButton');
        this.messagesContainer = document.getElementById('messages');
        this.chatContainer = document.getElementById('chatContainer');
        this.container = document.querySelector('.container');

        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        this.isLoading = false;
        this.messageHistory = [];
        this.currentPopup = null;
        this.currentRating = 0;

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Markdown —Ä–µ–Ω–¥–µ—Ä–µ—Ä
        this.markdownRenderer = new MarkdownRenderer();

        this.initializeEventListeners();
        this.showWelcomeMessage();
        this.createRatingPopup();
    }

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç UUID –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @returns {string} UUID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    generateUUID() {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
            const r = Math.random() * 16 | 0;
            const v = c === 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16);
        });
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    initializeEventListeners() {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        this.sendButton.addEventListener('click', () => this.sendMessage());

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è Enter –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
        this.messageInput.addEventListener('keydown', (event) => {
            if (event.key === 'Enter' && !event.shiftKey) {
                event.preventDefault();
                this.sendMessage();
            }
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
        this.messageInput.addEventListener('input', () => {
            this.updateSendButtonState();
            this.autoResizeTextarea();
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–±—Ä–æ—Å–∞ —á–∞—Ç–∞
        this.resetButton.addEventListener('click', () => this.resetChat());
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
     */
    showWelcomeMessage() {
        const welcomeMessage = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, —è –≤–∞—à –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ —Å—Ñ–µ—Ä–µ –∑–∞–∫—É–ø–æ–∫, –∑–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã, –∞ —è –Ω–∞ –Ω–∏—Ö –æ—Ç–≤–µ—á—É .';
        this.addMessage(welcomeMessage, 'assistant');
    }

    /**
     * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è
     */
    autoResizeTextarea() {
        this.messageInput.style.height = 'auto';
        this.messageInput.style.height = Math.min(this.messageInput.scrollHeight, 120) + 'px';
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
     */
    updateSendButtonState() {
        const hasText = this.messageInput.value.trim().length > 0;
        this.sendButton.disabled = !hasText || this.isLoading;
    }

    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
     * @param {string} text - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
     * @param {string} sender - –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å ('user' –∏–ª–∏ 'assistant')
     * @param {boolean} isLoading - –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
     * @param {string} requestId - ID –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Å–≤—è–∑–∏ —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º
     */
    addMessage(text, sender, isLoading = false, requestId = null) {
        const messageDiv = document.createElement('div');
        messageDiv.classList.add('message', sender);

        if (isLoading) {
            messageDiv.classList.add('loading');
            messageDiv.innerHTML = `
                –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç...
                <div class="loading-dots">
                    <span></span>
                    <span></span>
                    <span></span>
                </div>
            `;
        } else {
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            if (sender === 'assistant') {
                // –î–ª—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ Markdown —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏
                let sources = [];
                let responseText = text;

                // –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –æ—Ç API —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏
                if (typeof text === 'string' && this.lastResponseSources) {
                    sources = this.lastResponseSources;
                    responseText = text;
                }

                const processedHtml = this.markdownRenderer.render(responseText, sources);
                messageDiv.innerHTML = processedHtml;

                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
                this.markdownRenderer.initializeSourceHandlers(messageDiv);
            } else {
                // –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ—Å—Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—Å—Ç
                messageDiv.textContent = text;
            }
        }

        this.messagesContainer.appendChild(messageDiv);

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ü–µ–Ω–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        if (sender === 'assistant' && !isLoading && requestId) {
            const feedbackButton = this.createFeedbackButton(requestId);
            this.messagesContainer.appendChild(feedbackButton);
        }

        this.scrollToBottom();

        return messageDiv;
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏
     * @param {string} requestId - ID –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞
     * @returns {HTMLElement} DOM —ç–ª–µ–º–µ–Ω—Ç –∫–Ω–æ–ø–∫–∏ –æ—Ü–µ–Ω–∫–∏
     */
    createFeedbackButton(requestId) {
        const buttonDiv = document.createElement('div');
        buttonDiv.classList.add('feedback-button');
        buttonDiv.setAttribute('data-request-id', requestId);
        buttonDiv.textContent = '–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É ‚úçÔ∏è';

        buttonDiv.addEventListener('click', () => this.openRatingPopup(requestId, buttonDiv));

        return buttonDiv;
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç popup –æ–∫–Ω–æ –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞
     */
    createRatingPopup() {
        const popup = document.createElement('div');
        popup.classList.add('rating-popup');
        popup.innerHTML = `
            <div class="rating-popup-content">
                <div class="rating-popup-title">–ü–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫—É</div>
                <div class="rating-stars-popup">
                    <span class="rating-star-popup" data-rating="1">üîò</span>
                    <span class="rating-star-popup" data-rating="2">üîò</span>
                    <span class="rating-star-popup" data-rating="3">üîò</span>
                    <span class="rating-star-popup" data-rating="4">üîò</span>
                    <span class="rating-star-popup" data-rating="5">üîò</span>
                </div>
                <textarea class="feedback-textarea" placeholder="–û—Å—Ç–∞–≤—å—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"></textarea>
                <div class="feedback-actions">
                    <button class="feedback-cancel">–û—Ç–º–µ–Ω–∞</button>
                    <button class="feedback-submit">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
                </div>
            </div>
        `;

        document.body.appendChild(popup);
        this.currentPopup = popup;

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è popup
        this.setupPopupEventListeners(popup);
    }

    /**
     * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è popup –æ–∫–Ω–∞
     * @param {HTMLElement} popup - Popup —ç–ª–µ–º–µ–Ω—Ç
     */
    setupPopupEventListeners(popup) {
        const stars = popup.querySelectorAll('.rating-star-popup');
        const cancelBtn = popup.querySelector('.feedback-cancel');
        const submitBtn = popup.querySelector('.feedback-submit');

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∑–≤–µ–∑–¥
        stars.forEach(star => {
            const rating = parseInt(star.getAttribute('data-rating'));

            star.addEventListener('mouseenter', () => this.highlightPopupStars(stars, rating));
            star.addEventListener('mouseleave', () => this.resetPopupStars(stars));
            star.addEventListener('click', () => this.selectRating(popup, rating));
        });

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ —Ñ–æ–Ω
        popup.addEventListener('click', (e) => {
            if (e.target === popup) {
                this.closeRatingPopup();
            }
        });

        // –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
        cancelBtn.addEventListener('click', () => this.closeRatingPopup());

        // –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
        submitBtn.addEventListener('click', () => this.submitPopupRating());
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å–º–∞–π–ª–∏–∫–∏ –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞
     * @param {number} rating - –†–µ–π—Ç–∏–Ω–≥ –æ—Ç 1 –¥–æ 5
     * @returns {Array} –ú–∞—Å—Å–∏–≤ —Å–º–∞–π–ª–∏–∫–æ–≤
     */
    getRatingEmojis(rating) {
        const emojis = {
            1: ['üî¥', 'üîò', 'üîò', 'üîò', 'üîò'],
            2: ['üü†', 'üü†', 'üîò', 'üîò', 'üîò'],
            3: ['üü°', 'üü°', 'üü°', 'üîò', 'üîò'],
            4: ['üîµ', 'üîµ', 'üîµ', 'üîµ', 'üîò'],
            5: ['üü¢', 'üü¢', 'üü¢', 'üü¢', 'üü¢']
        };
        return emojis[rating] || ['üîò', 'üîò', 'üîò', 'üîò', 'üîò'];
    }

    /**
     * –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ—Ç –∑–≤–µ–∑–¥—ã –≤ popup –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
     * @param {NodeList} stars - –ó–≤–µ–∑–¥—ã –≤ popup
     * @param {number} rating - –†–µ–π—Ç–∏–Ω–≥ –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏
     */
    highlightPopupStars(stars, rating) {
        const emojis = this.getRatingEmojis(rating);
        stars.forEach((star, index) => {
            star.textContent = emojis[index];
        });
    }

    /**
     * –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ø–æ–¥—Å–≤–µ—Ç–∫—É –∑–≤–µ–∑–¥ –≤ popup
     * @param {NodeList} stars - –ó–≤–µ–∑–¥—ã –≤ popup
     */
    resetPopupStars(stars) {
        if (this.currentRating === 0) {
            stars.forEach(star => {
                star.textContent = 'üîò';
            });
        } else {
            this.highlightPopupStars(stars, this.currentRating);
        }
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Å—ã–ª–∫–∏ –≤ —Ç–µ–∫—Å—Ç–µ, –¥–µ–ª–∞—è –∏—Ö –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏
     * @param {string} text - –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
     * @returns {string} –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å HTML —Å—Å—ã–ª–∫–∞–º–∏
     */
    processLinks(text) {
        // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ markdown-—Å—Å—ã–ª–æ–∫ [text](url)
        const markdownLinkRegex = /\[([^\]]+)\]\(([^)]+)\)/g;

        // –ó–∞–º–µ–Ω–∞ markdown-—Å—Å—ã–ª–æ–∫ –Ω–∞ HTML —Å—Å—ã–ª–∫–∏
        let processedText = text.replace(markdownLinkRegex, '<a href="$2" target="_blank" rel="noopener noreferrer">$1</a>');

        // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ–±—ã—á–Ω—ã—Ö URL
        const urlRegex = /(https?:\/\/[^\s]+)/g;

        // –ó–∞–º–µ–Ω–∞ –æ–±—ã—á–Ω—ã—Ö URL –Ω–∞ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ (–µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —É–∂–µ –≤ HTML —Ç–µ–≥–∞—Ö)
        processedText = processedText.replace(urlRegex, (match) => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ URL —É–∂–µ –≤–Ω—É—Ç—Ä–∏ HTML —Ç–µ–≥–∞
            if (processedText.indexOf(`href="${match}"`) !== -1) {
                return match;
            }
            return `<a href="${match}" target="_blank" rel="noopener noreferrer">${match}</a>`;
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫
        processedText = processedText.replace(/\n/g, '<br>');

        return processedText;
    }

    /**
     * –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ —á–∞—Ç–∞ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
     */
    scrollToBottom() {
        this.messagesContainer.scrollTop = this.messagesContainer.scrollHeight;
    }

    /**
     * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç popup –æ–∫–Ω–æ –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞
     * @param {string} requestId - ID –∑–∞–ø—Ä–æ—Å–∞
     * @param {HTMLElement} buttonElement - –ö–Ω–æ–ø–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–∫—Ä—ã–ª–∞ popup
     */
    openRatingPopup(requestId, buttonElement) {
        this.currentRequestId = requestId;
        this.currentButtonElement = buttonElement;
        this.currentRating = 0;

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
        const textarea = this.currentPopup.querySelector('.feedback-textarea');
        textarea.value = '';

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ü–≤–µ—Ç–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã
        this.currentPopup.className = 'rating-popup';

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–≤–µ–∑–¥—ã –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
        const stars = this.currentPopup.querySelectorAll('.rating-star-popup');
        stars.forEach(star => {
            star.textContent = 'üîò';
        });

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º popup
        this.currentPopup.classList.add('visible');
    }

    /**
     * –ó–∞–∫—Ä—ã–≤–∞–µ—Ç popup –æ–∫–Ω–æ
     */
    closeRatingPopup() {
        if (this.currentPopup) {
            this.currentPopup.classList.remove('visible');
            this.currentRating = 0;
            this.currentRequestId = null;
            this.currentButtonElement = null;
        }
    }

    /**
     * –í—ã–±–∏—Ä–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –≤ popup
     * @param {HTMLElement} popup - Popup —ç–ª–µ–º–µ–Ω—Ç
     * @param {number} rating - –í—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥
     */
    selectRating(popup, rating) {
        this.currentRating = rating;

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É popup
        popup.className = `rating-popup visible rating-${rating}`;

        // –§–∏–∫—Å–∏—Ä—É–µ–º –∑–≤–µ–∑–¥—ã
        const stars = popup.querySelectorAll('.rating-star-popup');
        this.highlightPopupStars(stars, rating);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –∏–∑ popup
     */
    async submitPopupRating() {
        if (this.currentRating === 0) {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É');
            return;
        }

        try {
            const textarea = this.currentPopup.querySelector('.feedback-textarea');
            const feedbackText = textarea.value.trim() || null;

            // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –º–æ–¥–µ–ª–∏
            const userMessage = this.getLastUserMessage();
            const modelResponse = this.getLastModelResponse();

            const feedbackData = {
                user_id: this.userUuid,
                user_message: userMessage,
                model_response: modelResponse,
                rating: this.currentRating,
                feedback: feedbackText
            };

            console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º feedback:', feedbackData);

            const response = await fetch(`${this.apiBaseUrl}${this.feedbackEndpoint}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(feedbackData)
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            // –ó–∞–º–µ–Ω—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –æ—Ü–µ–Ω–∫–∏
            this.showSubmittedRating(this.currentButtonElement, this.currentRating);

            // –ó–∞–∫—Ä—ã–≤–∞–µ–º popup
            this.closeRatingPopup();

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ feedback:', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ü–µ–Ω–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        }
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –æ—Ü–µ–Ω–∫—É –≤–º–µ—Å—Ç–æ –∫–Ω–æ–ø–∫–∏
     * @param {HTMLElement} buttonElement - –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–º–µ–Ω—ã
     * @param {number} rating - –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥
     */
    showSubmittedRating(buttonElement, rating) {
        const submittedDiv = document.createElement('div');
        submittedDiv.classList.add('submitted-rating', `rating-${rating}`);
        submittedDiv.textContent = `–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞: ${rating}/5`;

        buttonElement.parentNode.replaceChild(submittedDiv, buttonElement);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async sendMessage() {
        const messageText = this.messageInput.value.trim();

        if (!messageText || this.isLoading) {
            return;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.addMessage(messageText, 'user');
        this.messageHistory.push({ sender: 'user', text: messageText });

        // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
        this.messageInput.value = '';
        this.autoResizeTextarea();
        this.updateSendButtonState();

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        this.setLoadingState(true);
        const loadingMessage = this.addMessage('', 'assistant', true);

        try {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
            const response = await this.callAPI(messageText);

            // –£–±–∏—Ä–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            loadingMessage.remove();

            // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –æ—Ç —Å–∏—Å—Ç–µ–º—ã —Å requestId –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞
            this.addMessage(response.response, 'assistant', false, response.requestId);
            this.messageHistory.push({ sender: 'assistant', text: response.response });

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞:', error);

            // –£–±–∏—Ä–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            loadingMessage.remove();

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            const errorMessage = '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.';
            this.addMessage(errorMessage, 'assistant');

        } finally {
            this.setLoadingState(false);
        }
    }


    /**
     * –í—ã–∑–æ–≤ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å
     * @param {string} query - –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @returns {Promise<Object>} –û—Ç–≤–µ—Ç –æ—Ç API
     */
    async callAPI(query) {
        const requestBody = {
            user_id: this.userUuid,
            query: query
        };

        const response = await fetch(`${this.apiBaseUrl}${this.apiEndpoint}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(requestBody)
        });

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const result = await response.json();
        // –î–æ–±–∞–≤–ª—è–µ–º user_id –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –¥–ª—è —Å–≤—è–∑–∏ —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º
        result.userId = result.user_id;
        result.requestId = this.generateUUID(); // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º response –∫–∞–∫ tuple[str, list[str]]
        if (Array.isArray(result.response) && result.response.length >= 2) {
            this.lastResponseSources = result.response[1]; // –ò—Å—Ç–æ—á–Ω–∏–∫–∏
            result.response = result.response[0]; // –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
        } else if (Array.isArray(result.response) && result.response.length >= 1) {
            this.lastResponseSources = [];
            result.response = result.response[0]; // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç - –æ—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç
        } else {
            this.lastResponseSources = [];
        }

        return result;
    }

    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
     * @param {boolean} loading - –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
     */
    setLoadingState(loading) {
        this.isLoading = loading;
        this.updateSendButtonState();

        if (loading) {
            this.container.classList.add('loading');
        } else {
            this.container.classList.remove('loading');
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @returns {string} –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    getLastUserMessage() {
        const userMessages = this.messageHistory.filter(msg => msg.sender === 'user');
        return userMessages.length > 0 ? userMessages[userMessages.length - 1].text : '';
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏
     * @returns {string} –ü–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏
     */
    getLastModelResponse() {
        const assistantMessages = this.messageHistory.filter(msg => msg.sender === 'assistant');
        return assistantMessages.length > 0 ? assistantMessages[assistantMessages.length - 1].text : '';
    }

    /**
     * –°–±—Ä–æ—Å —á–∞—Ç–∞ –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
     */
    resetChat() {
        // –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
        this.messageHistory = [];

        // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π
        this.messagesContainer.innerHTML = '';

        // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
        this.messageInput.value = '';
        this.autoResizeTextarea();
        this.updateSendButtonState();

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π UUID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.userUuid = this.generateUUID();

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        this.showWelcomeMessage();

        // –£–±–∏—Ä–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ –∞–∫—Ç–∏–≤–Ω–æ
        this.setLoadingState(false);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
document.addEventListener('DOMContentLoaded', () => {
    new ChatApp();
});
