#!/usr/bin/env python3
"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ RAG Template —Å–∏—Å—Ç–µ–º—ã.

–ü–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å backend (fake –∏–ª–∏ —Ä–µ–∞–ª—å–Ω—ã–π) –∏ frontend –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.

Usage:
    python run_system.py [--backend fake|real] [--ui-port PORT] [--no-browser]
"""

import argparse
import subprocess
import sys
import threading
import time
import webbrowser
from pathlib import Path


class SystemRunner:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø—É—Å–∫–æ–º —Å–∏—Å—Ç–µ–º—ã."""

    def __init__(self):
        self.backend_process = None
        self.ui_process = None
        self.running = True

    def run_backend(self, backend_type="fake"):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç backend —Å–µ—Ä–≤–µ—Ä.

        Parameters
        ----------
        backend_type : str
            –¢–∏–ø backend'–∞: 'fake' –∏–ª–∏ 'real'
        """
        try:
            if backend_type == "fake":
                print("üîß –ó–∞–ø—É—Å–∫ fake backend...")
                backend_script = Path("src/services/api_gateway/fake_backend.py")
                if not backend_script.exists():
                    print(f"‚ùå –§–∞–π–ª {backend_script} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                    return False

                self.backend_process = subprocess.Popen(
                    [sys.executable, str(backend_script)]
                )
            else:
                print("üîß –ó–∞–ø—É—Å–∫ —Ä–µ–∞–ª—å–Ω–æ–≥–æ API Gateway...")
                main_script = Path("src/services/api_gateway/main.py")
                if not main_script.exists():
                    print(f"‚ùå –§–∞–π–ª {main_script} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                    return False

                self.backend_process = subprocess.Popen(
                    [sys.executable, str(main_script)]
                )

            # –î–∞–µ–º –≤—Ä–µ–º—è backend'—É –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
            print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ backend...")
            time.sleep(3)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
            if self.backend_process.poll() is None:
                print("‚úÖ Backend –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                return True
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ backend")
                return False

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ backend: {e}")
            return False

    def run_ui(self, port=3000, no_browser=False):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç UI —Å–µ—Ä–≤–µ—Ä.

        Parameters
        ----------
        port : int
            –ü–æ—Ä—Ç –¥–ª—è UI —Å–µ—Ä–≤–µ—Ä–∞
        no_browser : bool
            –ù–µ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –±—Ä–∞—É–∑–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        """
        try:
            ui_path = Path("src/services/ui")
            if not ui_path.exists():
                print(f"‚ùå –ü–∞–ø–∫–∞ {ui_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
                return False

            print(f"üé® –ó–∞–ø—É—Å–∫ UI –Ω–∞ –ø–æ—Ä—Ç—É {port}...")

            self.ui_process = subprocess.Popen(
                [sys.executable, "-m", "http.server", str(port)], cwd=ui_path
            )

            # –î–∞–µ–º –≤—Ä–µ–º—è UI –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
            time.sleep(2)

            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
            if not no_browser:
                try:
                    webbrowser.open(f"http://localhost:{port}")
                except Exception as e:
                    print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –±—Ä–∞—É–∑–µ—Ä: {e}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
            if self.ui_process.poll() is None:
                print("‚úÖ UI –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                return True
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ UI")
                return False

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ UI: {e}")
            return False

    def stop_all(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã."""
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã...")
        self.running = False

        if self.backend_process:
            try:
                self.backend_process.terminate()
                self.backend_process.wait(timeout=5)
                print("‚úÖ Backend –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except subprocess.TimeoutExpired:
                self.backend_process.kill()
                print("‚ö° Backend –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
            except Exception as e:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ backend: {e}")

        if self.ui_process:
            try:
                self.ui_process.terminate()
                self.ui_process.wait(timeout=5)
                print("‚úÖ UI –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except subprocess.TimeoutExpired:
                self.ui_process.kill()
                print("‚ö° UI –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
            except Exception as e:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ UI: {e}")

    def monitor_processes(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤."""
        while self.running:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º backend
                if self.backend_process and self.backend_process.poll() is not None:
                    print("‚ùå Backend –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ")
                    self.running = False
                    break

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º UI
                if self.ui_process and self.ui_process.poll() is not None:
                    print("‚ùå UI –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ")
                    self.running = False
                    break

                time.sleep(1)

            except KeyboardInterrupt:
                break


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã."""
    parser = argparse.ArgumentParser(description="–ó–∞–ø—É—Å–∫ RAG Template —Å–∏—Å—Ç–µ–º—ã")
    parser.add_argument(
        "--backend",
        choices=["fake", "real"],
        default="fake",
        help="–¢–∏–ø backend'–∞: fake (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è) –∏–ª–∏ real (API Gateway)",
    )
    parser.add_argument(
        "--ui-port",
        type=int,
        default=3000,
        help="–ü–æ—Ä—Ç –¥–ª—è UI —Å–µ—Ä–≤–µ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 3000)",
    )
    parser.add_argument(
        "--no-browser", action="store_true", help="–ù–µ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –±—Ä–∞—É–∑–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
    )
    parser.add_argument(
        "--backend-only", action="store_true", help="–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ backend"
    )
    parser.add_argument("--ui-only", action="store_true", help="–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ UI")

    args = parser.parse_args()

    runner = SystemRunner()

    try:
        print("üöÄ –ó–∞–ø—É—Å–∫ RAG Template —Å–∏—Å—Ç–µ–º—ã")
        print("=" * 50)

        success = True

        # –ó–∞–ø—É—Å–∫ backend
        if not args.ui_only:
            success &= runner.run_backend(args.backend)

        # –ó–∞–ø—É—Å–∫ UI
        if not args.backend_only and success:
            success &= runner.run_ui(args.ui_port, args.no_browser)

        if not success:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É")
            sys.exit(1)

        print("\n" + "=" * 50)
        print("üéâ –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print(f"üîß Backend: http://localhost:8080 ({args.backend})")
        if not args.backend_only:
            print(f"üé® Frontend: http://localhost:{args.ui_port}")
        print("\nüí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        print("=" * 50)

        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        monitor_thread = threading.Thread(target=runner.monitor_processes)
        monitor_thread.daemon = True
        monitor_thread.start()

        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        try:
            while runner.running:
                time.sleep(1)
        except KeyboardInterrupt:
            pass

    except KeyboardInterrupt:
        pass
    finally:
        runner.stop_all()
        print("\nüëã –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")


if __name__ == "__main__":
    main()
